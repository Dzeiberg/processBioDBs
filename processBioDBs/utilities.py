# AUTOGENERATED! DO NOT EDIT! File to edit: 01_Utilities.ipynb (unless otherwise specified).

__all__ = ['getSequence', 'getRep', 'prepSeq']

# Cell
import numpy as np
import ensembl_rest

# Cell
def getSequence(gene):
    "Get the canonical protein sequence coded by the given gene symbol"
    q = ensembl_rest.symbol_lookup(
        species='human',
        symbol=gene,params={'expand':True})
    try:
        is_canonical = [t["is_canonical"] for t in q["Transcript"]]
        t = q["Transcript"][np.argmax(is_canonical)]
        seq = ensembl_rest.sequence_id(t["Translation"]["id"])["seq"]
        return seq
    except:
        return ""

# Comes from 08_Generate_Matrices.ipynb, cell
def getRep(rep,L,originalWindow=510, W=3):
    """
    Extract a window of the matrix representation rep of size W around a mutation at location L

    Arguments:
    - rep : embedding matrix
    - L : The index of the variant about which windows will be taken
    - originalWindow : The size of the window used to generate the subset of the protein sequence that is embedded
    - W : the desired size of the window to be taken from embedding around the variant

    Example:
    variant at position 3
    what the function is given is 1 2 3 4 5
    Given these two you want to return a window of size 1 around position 3 : [2 3 4]

    Original Sequence               : 0 1 2 3 4 5 6
    Variant Position                :       L
    subset passed to model          :  [1 2 3 4 5]
                                        I       J
    pass to model a window of size 1:    [2 3 4]

                                          K   M


    Example:

    L = 2
    Original Window size used for embedding: 3
    Desired Window size : 1

    Original Sequence : 0 1 2 3 4 5 6
                        I   L     J
                          K   M

    """
    i,j = max(0, L-originalWindow),min(len(rep), L + originalWindow)
    k,m = max(0,L - W - i), min(len(rep),L + W - i + 1)
    assert k >= 0 and m <= len(rep)

    return rep[k : m]

# Comes from 08_Generate_Matrices.ipynb, cell


def prepSeq(representationMatrix, locationOfVariant, originalWindowSize=510, windowSizes=2**np.arange(1,9)):
    """
    Arguments:
    - representationMatrix : (nCharacters, 1280)
    - locationOfVariant (0-index)

    """
    windowVectors= []
    for w in windowSizes:
        # get the windowed subset of the matrix and take the mean across all character positions
        r = getRep(representationMatrix, locationOfVariant, originalWindow=originalWindowSize, W=w).mean(0)
        windowVectors.append(r)
    xi = np.concatenate(windowVectors)
    return xi